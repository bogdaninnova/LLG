package main;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;

import main.fields.Anisotrophia;
import main.fields.Circular;
import main.fields.Impuls;
import main.observers.EnergyCounter;

public class Launcher {

	public static void main(String...strings) {

		longCalculation();

		//diagramm();
		
		
		/*Calculator c = new Calculator();
		c.fieldsList.getFields().add(new Anisotrophia(0, 0));
		Impuls impuls = new Impuls(new Vector(1, 0, 0));
		
		double h = 0.5;
		double tao = 20;
		
		//updateImpuls(impuls, h, tao);
		
		impuls.add(0, h, 0.01);
		impuls.add(h, h, tao - 0.02);
		impuls.add(h, 0, 0.01);
		c.fieldsList.getFields().add(impuls);
		c.run(0, tao + 100);
		
		System.out.println(c.getArray().getLast().getZ() < 0);
		new Draw(c, Math.PI / 2 + Math.PI / 8,Math.PI / 8,0, "hope").drawTraectory();


		
		
		/*double w = 2;
		double tetta = Math.acos(2 * 0.5 - 1);
		Calculator c3 = new Calculator();
		c3.fieldsList.getFields().add(new Anisotrophia(tetta, 0));
		c3.fieldsList.getFields().add(new Circular(w, 0.2));
		
		c3.run(800, 100);
		//c3.run(w);
		
		System.out.println(c3.getObserverValue(EnergyCounter.class) * 100000);
		
		
		new Draw(c3, 0.4 * Math.PI, 0.4 * Math.PI, 0, "hope").drawTraectory();
		
		//System.out.println(tetta / Math.PI);
		//System.out.println(c3.getObserverValue(EnergyCounter.class) * 100000);

		/*Calculator c2 = new Calculator();
		
		double h = 0.53;
		Impuls impuls = new Impuls(new Vector(1, 0, 0));
		impuls.add(0, 0, 10);
		impuls.add(0, h, 0.01);
		impuls.add(h, h, 50);
		impuls.add(h, 0, 0.01);
		
		//c2.fieldsList.getFields().add(impuls);
		//c2.fieldsList.getFields().add(new Circular(0.5, 1));
		c2.fieldsList.getFields().add(new Anisotrophia(0, 0));
		
		
		c2.run(0, 100);
		DrawComponents.draw(c2);*/
		//new Draw(c2, Math.PI / 2 + Math.PI / 8,Math.PI / 8,0, "hope").drawTraectory();

	}
	
	private static Impuls updateImpuls(Impuls impuls, double h, double tao) {
		impuls.list.clear();
		impuls.add(0, h, 0.01);
		impuls.add(h, h, tao - 0.02);
		impuls.add(h, 0, 0.01);
		return impuls;
	}
		
	public static void diagramm() {
		Calculator c = new Calculator();
		c.fieldsList.getFields().add(new Anisotrophia(0, 0));
		Impuls impuls = new Impuls(new Vector(1, 0, 0));
		c.fieldsList.getFields().add(impuls);
		
		LinkedList<Double> taoList = new LinkedList<Double>();
		LinkedList<Double> hList = new LinkedList<Double>();
		
		int counter = 0;
		
		for (double h = 0.01; h <= 1; h += 0.01) {
			System.out.println("h = " + h + " / " + new Date());
			for (double tao = 0; tao <= 20; tao += 0.01) {
				updateImpuls(impuls, h, tao);
				c.run(0, tao + 1);
				if (c.getArray().getLast().getZ() < 0) {
					taoList.add(tao);
					hList.add(h);
				}
			}
			if (counter++%10==0) {
				Writer.writeDoubleList(taoList, "Tao list " + h);
				Writer.writeDoubleList(hList, "h list" + h);
			}
		}
		Writer.writeDoubleList(taoList, "Tao list ");
		Writer.writeDoubleList(hList, "h list");
	}
	
	private static void longCalculation() {
		
		Frame frame = new Frame();
		
		Calculator c = new Calculator();
		c.fieldsList.getFields().add(new Anisotrophia(0, 0));
		c.fieldsList.getFields().add(new Circular(0, 0));
		
		double tetta;
		double anglestep = 0.05;
		
		for (double h = 0.21; h <= 0.26; h += 0.01) {

			ArrayList<Double> energyList = new ArrayList<Double>();
			for (double w = 0.1; w <= 2.01; w += 0.1) {//TODO
				
				frame.printText(new Date().toString());
				frame.printText("h : " + h);
				frame.printText("w : " + w);
				frame.printText("");
				
				((Circular) c.fieldsList.get(Circular.class)).setNewData(w, h);
				//frame.notify("W: " + w);	///TODO
				double energy = 0;
				for (double i = 0; i <= 1; i += anglestep) {
					
					tetta = Math.acos(2 * i - 1);
					((Anisotrophia) c.fieldsList.get(Anisotrophia.class)).setVector(new Vector(tetta, 0));
					c.run(800, 100);
					energy += c.getObserverValue(EnergyCounter.class);
				}
				energyList.add(energy * anglestep);
			}
			
			Writer.writeDoubleList(energyList, "h = " + h);
		}
	}
}